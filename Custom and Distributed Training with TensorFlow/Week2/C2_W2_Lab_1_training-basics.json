{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hrXv0rU9sIma"
   },
   "source": [
    "# Custom Training Basics\n",
    "\n",
    "In this ungraded lab you'll gain a basic understanding of building custom training loops. \n",
    "- It takes you through the underlying logic of fitting any model to a set of inputs and outputs. \n",
    "- You will be training your model on the linear equation for a straight line, wx + b. \n",
    "- You will implement basic linear regression from scratch using gradient tape.\n",
    "- You will try to minimize the loss incurred by the model using linear regression."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3LXMVuV0VhDr"
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "NiolgWMPgpwI"
   },
   "outputs": [],
   "source": [
    "from __future__ import absolute_import, division, print_function, unicode_literals\n",
    "\n",
    "try:\n",
    "  # %tensorflow_version only exists in Colab.\n",
    "  %tensorflow_version 2.x\n",
    "except Exception:\n",
    "  pass\n",
    "\n",
    "\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "K7O6eEGF5DcN"
   },
   "source": [
    "## Define Model\n",
    "\n",
    "You define your model as a class. \n",
    "- `x` is your input tensor. \n",
    "- The model should output values of **wx+b**. \n",
    "- You'll start off by initializing w and b to random values. \n",
    "- During the training process, values of w and b get updated in accordance with linear regression so as to minimize the loss incurred by the model. \n",
    "- Once you arrive at optimal values for w and b, the model would have been trained to correctly predict the values of wx+b.\n",
    "\n",
    "Hence, \n",
    "- **w** and **b** are trainable weights of the model. \n",
    "- **x** is the input\n",
    "- **y** = wx + b is the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Modelcst(object):\n",
    "    def __init__(self):\n",
    "        self.w = tf.Variable(2.0)\n",
    "        self.b = tf.Variable(1.0)\n",
    "    def __call__(self,inputs):\n",
    "        return self.w*inputs + self.b\n",
    "modelcst =Modelcst()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_WRu7Pze7wk8"
   },
   "outputs": [],
   "source": [
    "class Model(object):\n",
    "  def __init__(self):\n",
    "    # Initialize the weights to `2.0` and the bias to `1.0`\n",
    "    # In practice, these should be initialized to random values (for example, with `tf.random.normal`)\n",
    "    self.w = tf.Variable(2.0)\n",
    "    self.b = tf.Variable(1.0)\n",
    "\n",
    "  def __call__(self, x):\n",
    "    return self.w * x + self.b\n",
    "\n",
    "model = Model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xa6j_yXa-j79"
   },
   "source": [
    "### Define a loss function\n",
    "\n",
    "A loss function measures how well the output of a model for a given input matches the target output. \n",
    "- The goal is to minimize this difference during training. \n",
    "- Let's use the standard L2 loss, also known as the least square errors\n",
    "$$Loss = \\sum_{i} \\left (y_{pred}^i - y_{target}^i \\right )^2$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def losscst(y,ypred) :\n",
    "    return tf.reduce_mean(tf.square(y-ypred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y0ysUFGY924U"
   },
   "outputs": [],
   "source": [
    "def loss(predicted_y, target_y):\n",
    "  return tf.reduce_mean(tf.square(predicted_y - target_y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qutT_fkl_CBc"
   },
   "source": [
    "### Obtain training data\n",
    "\n",
    "First, synthesize the training data using the \"true\" w and \"true\" b. \n",
    "\n",
    "$$y = w_{true} \\times x + b_{true} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor([-1.0304878   1.5944533   0.5808941  -0.94228107 -0.46665868], shape=(5,), dtype=float32) tf.Tensor([-3.452439   9.672267   4.6044703 -3.0114052 -0.6332934], shape=(5,), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "True_wcst = 5.0\n",
    "True_bcst = 1.7\n",
    "EXAMPLES = 1000\n",
    "\n",
    "x = tf.random.normal(shape=[EXAMPLES],dtype=tf.float32)\n",
    "y = True_wcst * x + True_bcst\n",
    "print(x[:5],y[:5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "gxPTb-kt_N5m"
   },
   "outputs": [],
   "source": [
    "TRUE_w = 3.0\n",
    "TRUE_b = 2.0\n",
    "NUM_EXAMPLES = 1000\n",
    "\n",
    "xs  = tf.random.normal(shape=[NUM_EXAMPLES])\n",
    "\n",
    "ys = (TRUE_w * xs) + TRUE_b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-50nq-wPBsAW"
   },
   "source": [
    "Before training the model, visualize the loss value by plotting the model's predictions in red crosses and the training data in blue dots:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_datacst(inputs,outputs,predicted):\n",
    "    true = plt.scatter(inputs,outputs,c=\"b\",marker=\".\")\n",
    "    pred = plt.scatter(inputs,predicted,c='r',marker=\".\")\n",
    "    plt.legend((true,pred),(\"Real\",\"Predicted\"))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "_eb83LtrB4nt"
   },
   "outputs": [],
   "source": [
    "def plot_data(inputs, outputs, predicted_outputs):\n",
    "  real = plt.scatter(inputs, outputs, c='b', marker='.')\n",
    "  predicted = plt.scatter(inputs, predicted_outputs, c='r', marker='+')\n",
    "  plt.legend((real,predicted), ('Real Data', 'Predicted Data'))\n",
    "  plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XL25a_aEOuim"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current loss: 1.829157\n"
     ]
    }
   ],
   "source": [
    "plot_datacst(xs, ys, model(xs))\n",
    "print('Current loss: %1.6f' % loss(model(xs), ys).numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "sSDP-yeq_4jE"
   },
   "source": [
    "### Define a training loop\n",
    "\n",
    "With the network and training data, train the model using [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent) \n",
    "- Gradient descent updates the trainable weights **w** and **b** to reduce the loss. \n",
    "\n",
    "\n",
    "There are many variants of the gradient descent scheme that are captured in `tf.train.Optimizer`—our recommended implementation. In the spirit of building from first principles, here you will implement the basic math yourself.\n",
    "- You'll use `tf.GradientTape` for automatic differentiation\n",
    "- Use `tf.assign_sub` for decrementing a value.  Note that assign_sub combines `tf.assign` and `tf.sub`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_cst(model,inputs,outputs,lr):\n",
    "    with tf.GradientTape() as tape:\n",
    "        loss = losscst(outputs,model(inputs))\n",
    "    dw,db = tape.gradient(loss, [model.w,model.b])\n",
    "    model.w.assign_sub(lr * dw)\n",
    "    model.b.assign_sub(lr * db)\n",
    "    \n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MBIACgdnA55X"
   },
   "outputs": [],
   "source": [
    "def train(model, inputs, outputs, learning_rate):\n",
    "  with tf.GradientTape() as t:\n",
    "    current_loss = loss(model(inputs), outputs)\n",
    "  dw, db = t.gradient(current_loss, [model.w, model.b])\n",
    "  model.w.assign_sub(learning_rate * dw)\n",
    "  model.b.assign_sub(learning_rate * db)\n",
    "\n",
    "  return current_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RwWPaJryD2aN"
   },
   "source": [
    "Finally, you can iteratively run through the training data and see how `w` and `b` evolve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epochs : 0 , Current lost9.486767768859863 and w 2.0 b 1.0\n",
      "epochs : 1 , Current lost6.072556495666504 and w 2.599531888961792 b 1.1410826444625854\n",
      "epochs : 2 , Current lost3.887094736099243 and w 3.0792505741119385 b 1.253732442855835\n",
      "epochs : 3 , Current lost2.4881646633148193 and w 3.4631001949310303 b 1.3436790704727173\n",
      "epochs : 4 , Current lost1.5926982164382935 and w 3.7702395915985107 b 1.415497899055481\n",
      "epochs : 5 , Current lost1.0195027589797974 and w 4.015998840332031 b 1.4728420972824097\n",
      "epochs : 6 , Current lost0.6525948643684387 and w 4.212644577026367 b 1.5186288356781006\n",
      "epochs : 7 , Current lost0.4177335798740387 and w 4.369991779327393 b 1.5551872253417969\n",
      "epochs : 8 , Current lost0.2673961818218231 and w 4.495894432067871 b 1.5843771696090698\n",
      "epochs : 9 , Current lost0.17116355895996094 and w 4.5966362953186035 b 1.6076836585998535\n",
      "epochs : 10 , Current lost0.1095639318227768 and w 4.677245616912842 b 1.6262924671173096\n",
      "epochs : 11 , Current lost0.07013342529535294 and w 4.741745471954346 b 1.6411504745483398\n",
      "epochs : 12 , Current lost0.04489344730973244 and w 4.793355464935303 b 1.6530135869979858\n",
      "epochs : 13 , Current lost0.028737034648656845 and w 4.834651470184326 b 1.6624854803085327\n",
      "epochs : 14 , Current lost0.01839504949748516 and w 4.867694854736328 b 1.6700479984283447\n",
      "epochs : 15 , Current lost0.011774949729442596 and w 4.894134998321533 b 1.676086187362671\n",
      "epochs : 16 , Current lost0.007537321653217077 and w 4.9152913093566895 b 1.680907130241394\n",
      "epochs : 17 , Current lost0.004824778530746698 and w 4.932219505310059 b 1.6847562789916992\n",
      "epochs : 18 , Current lost0.003088404191657901 and w 4.945765018463135 b 1.6878294944763184\n",
      "epochs : 19 , Current lost0.0019769335631281137 and w 4.956603527069092 b 1.690283179283142\n"
     ]
    }
   ],
   "source": [
    "modelcst = Modelcst()\n",
    "\n",
    "list_w, list_b = [] ,[]\n",
    "epochs=20\n",
    "losses = []\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    list_w.append(modelcst.w.numpy())\n",
    "    list_b.append(modelcst.b.numpy())\n",
    "    currloss = train_cst(modelcst,x,y,0.1)\n",
    "    losses.append(currloss)\n",
    "    print(f\"epochs : {epoch} , Current lost{currloss} and w {list_w[-1]} b {list_b[-1]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XdfkR223D9dW"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch  0: w=2.00 b=1.00, loss=1.82916\n",
      "Epoch  1: w=2.17 b=1.19, loss=1.21981\n",
      "Epoch  2: w=2.32 b=1.35, loss=0.81395\n",
      "Epoch  3: w=2.43 b=1.47, loss=0.54345\n",
      "Epoch  4: w=2.53 b=1.57, loss=0.36305\n",
      "Epoch  5: w=2.61 b=1.66, loss=0.24267\n",
      "Epoch  6: w=2.68 b=1.72, loss=0.16229\n",
      "Epoch  7: w=2.74 b=1.78, loss=0.10859\n",
      "Epoch  8: w=2.78 b=1.82, loss=0.07270\n",
      "Epoch  9: w=2.82 b=1.85, loss=0.04869\n",
      "Epoch 10: w=2.85 b=1.88, loss=0.03262\n",
      "Epoch 11: w=2.88 b=1.90, loss=0.02187\n",
      "Epoch 12: w=2.90 b=1.92, loss=0.01467\n",
      "Epoch 13: w=2.92 b=1.94, loss=0.00984\n",
      "Epoch 14: w=2.93 b=1.95, loss=0.00660\n"
     ]
    }
   ],
   "source": [
    "model = Model()\n",
    "\n",
    "# Collect the history of W-values and b-values to plot later\n",
    "list_w, list_b = [], []\n",
    "epochs = range(15)\n",
    "losses = []\n",
    "for epoch in epochs:\n",
    "  list_w.append(model.w.numpy())\n",
    "  list_b.append(model.b.numpy())\n",
    "  current_loss = train(model, xs, ys, learning_rate=0.1)\n",
    "  losses.append(current_loss)\n",
    "  print('Epoch %2d: w=%1.2f b=%1.2f, loss=%2.5f' %\n",
    "        (epoch, list_w[-1], list_b[-1], current_loss))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EI_1PwOBR6TW"
   },
   "source": [
    "In addition to the values for losses, you also plot the progression of trainable variables over epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n",
       "       17, 18, 19])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array(range(20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "q8gJThOCNXAp"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.0, 2.599532, 3.0792506, 3.4631002, 3.7702396, 4.015999, 4.2126446, 4.369992, 4.4958944, 4.5966363, 4.6772456, 4.7417455, 4.7933555, 4.8346515, 4.867695, 4.894135, 4.9152913, 4.9322195, 4.945765, 4.9566035]\n",
      "[1.0, 1.1410826, 1.2537324, 1.3436791, 1.4154979, 1.4728421, 1.5186288, 1.5551872, 1.5843772, 1.6076837, 1.6262925, 1.6411505, 1.6530136, 1.6624855, 1.670048, 1.6760862, 1.6809071, 1.6847563, 1.6878295, 1.6902832]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(list_w)\n",
    "print(list_b)\n",
    "plt.plot(np.array(range(20)), list_w, 'r')\n",
    "plt.plot([True_wcst] * len(range(epochs)), 'r--',\n",
    "      [TRUE_b] * len(range(epochs)), 'b--')\n",
    "plt.legend(['w', 'b', 'True w', 'True b'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QsTbG9J2MM9W"
   },
   "source": [
    "## Plots for Evaluation\n",
    "Now you can plot the actual outputs in red and the model's predictions in blue on a set of random test examples.\n",
    "\n",
    "You can see that the model is able to make predictions on the test set fairly accurately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YRHpHCJ3273d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_inputs  = tf.random.normal(shape=[NUM_EXAMPLES])\n",
    "test_outputs = test_inputs * True_wcst + True_bcst\n",
    "\n",
    "predicted_test_outputs = modelcst(test_inputs)\n",
    "plot_data(test_inputs, test_outputs, predicted_test_outputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "zY-j2FJYSfis"
   },
   "source": [
    "Visualize the cost function against the values of each of the trainable weights the model approximated to over time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hY-gQWFfOIu-"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_loss_for_weights(weights_list, losses):\n",
    "  for idx, weights in enumerate(weights_list):\n",
    "    plt.subplot(120 + idx + 1)\n",
    "    plt.plot(weights['values'], losses, 'r')\n",
    "    plt.plot(weights['values'], losses, 'bo')\n",
    "    plt.xlabel(weights['name'])\n",
    "    plt.ylabel('Loss')\n",
    "    \n",
    "    \n",
    "weights_list = [{ 'name' : \"w\",\n",
    "                  'values' : list_w\n",
    "                },\n",
    "                {\n",
    "                  'name' : \"b\",\n",
    "                  'values' : list_b\n",
    "                }]\n",
    "\n",
    "plot_loss_for_weights(weights_list, losses)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "include_colab_link": true,
   "name": "Training Basics.ipynb",
   "private_outputs": true,
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
